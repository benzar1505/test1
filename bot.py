import os
import json
import time
from typing import Dict, Any
from dotenv import load_dotenv
import telebot
from telebot import types

# === ENV ===
load_dotenv()  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

if not BOT_TOKEN:
    raise RuntimeError("–£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ .env –∏–ª–∏ Secrets Replit).")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "data.json"
MIN_BID_USD = 50  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $50

# === STORAGE ===
def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE):
        data = {
            "lots": {
                # –ü—Ä–∏–º–µ—Ä—ã –ª–æ—Ç–æ–≤ "–∏–∑ –∫–æ—Ä–æ–±–∫–∏"
                "1": {
                    "id": "1",
                    "title": "BMW M3 (E92), 2012",
                    "photo_url": "https://picsum.photos/seed/bmw_m3/1024/768",
                    "current_bid": 0,
                    "current_bidder_id": None,
                    "created_at": int(time.time())
                },
                "2": {
                    "id": "2",
                    "title": "Audi A6 (C7), 2014",
                    "photo_url": "https://picsum.photos/seed/audi_a6/1024/768",
                    "current_bid": 0,
                    "current_bidder_id": None,
                    "created_at": int(time.time())
                }
            },
            "pending_bids": {}  # user_id -> lot_id (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã)
        }
        save_data(data)
        return data
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, Any]) -> None:
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

DATA = load_data()

# === KEYBOARDS ===
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤"))
    kb.row(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / –ü—Ä–∞–≤–∏–ª–∞"), types.KeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return kb

def lot_inline_kb(lot_id: str):
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üí∏ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"bid:{lot_id}"))
    return ikb

def lot_open_inline_kb(lot_id: str):
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üîé –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç", callback_data=f"view:{lot_id}"))
    return ikb

# === HELPERS ===
def mask_user(user: telebot.types.User) -> str:
    # –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —é–∑–µ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    name = user.first_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
    return f"{name} ({user.id})"

def lot_text(lot: Dict[str, Any]) -> str:
    cur = lot.get("current_bid", 0)
    status = f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <b>${cur}</b>" if cur and cur >= MIN_BID_USD else "–°—Ç–∞–≤–æ–∫ –µ—â—ë –Ω–µ—Ç"
    return (
        f"<b>{lot['title']}</b>\n"
        f"{status}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>${MIN_BID_USD}</b>"
    )

def ensure_data():
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–µ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    global DATA
    DATA = load_data()

# === COMMANDS ===
@bot.message_handler(commands=["start", "menu"])
def start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–∞ –∞–≤—Ç–æ üöó\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ\n"
        "‚Ä¢ ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / –ü—Ä–∞–≤–∏–ª–∞ ‚Äî –∫–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å\n"
        "‚Ä¢ üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())

@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() in ["üìã —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤", "—Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤", "–ª–æ—Ç—ã"])
def show_lots(message: types.Message):
    ensure_data()
    lots = DATA.get("lots", {})
    if not lots:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –ª–æ—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=main_menu_kb())
        return
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç—ã:", reply_markup=main_menu_kb())
    for lot_id, lot in lots.items():
        caption = lot_text(lot)
        try:
            bot.send_photo(message.chat.id, photo=lot["photo_url"], caption=caption, reply_markup=lot_inline_kb(lot_id))
        except Exception:
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –æ—Ç–¥–∞–ª–∞—Å—å
            bot.send_message(message.chat.id, caption, reply_markup=lot_inline_kb(lot_id))

@bot.message_handler(func=lambda m: m.text and m.text.strip().lower().startswith("‚ÑπÔ∏è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
def info(message: types.Message):
    rules = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞</b>\n\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>${MIN_BID_USD}</b>.\n"
        "‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –º–∏–Ω–∏–º—É–º –Ω–∞ $1.\n"
        "‚Ä¢ –°—Ç–∞–≤–∫–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç.\n"
        "‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –ª–æ—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤.\n"
        "‚Ä¢ –õ—é–±—ã–µ —Å–ø–æ—Ä–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Ä–µ—à–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
    )
    bot.send_message(message.chat.id, rules, reply_markup=main_menu_kb())

@bot.message_handler(func=lambda m: m.text and m.text.strip().lower().startswith("üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
def support(message: types.Message):
    text = (
        "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º.\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())
    bot.register_next_step_handler(message, collect_support)

def collect_support(message: types.Message):
    report = message.text or "<–±–µ–∑ —Ç–µ–∫—Å—Ç–∞>"
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    if ADMIN_CHAT_ID:
        try:
            bot.send_message(int(ADMIN_CHAT_ID),
                             f"üÜò <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n–û—Ç: {mask_user(message.from_user)}\n\n{report}")
        except Exception:
            pass

# === CALLBACKS ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("view:"))
def on_view_lot(call: types.CallbackQuery):
    lot_id = call.data.split(":", 1)[1]
    ensure_data()
    lot = DATA["lots"].get(lot_id)
    if not lot:
        bot.answer_callback_query(call.id, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    caption = lot_text(lot)
    try:
        bot.send_photo(call.message.chat.id, photo=lot["photo_url"], caption=caption, reply_markup=lot_inline_kb(lot_id))
    except Exception:
        bot.send_message(call.message.chat.id, caption, reply_markup=lot_inline_kb(lot_id))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("bid:"))
def on_bid(call: types.CallbackQuery):
    lot_id = call.data.split(":", 1)[1]
    ensure_data()
    lot = DATA["lots"].get(lot_id)
    if not lot:
        bot.answer_callback_query(call.id, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        call.message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ $ –¥–ª—è –ª–æ—Ç–∞:\n<b>{lot['title']}</b>\n"
        f"(–º–∏–Ω–∏–º—É–º ${MAX(MIN_BID_USD, lot.get('current_bid', 0)+1) if lot.get('current_bid', 0) else MIN_BID_USD})"
    )
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∂–¥—ë–º –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –ª–æ—Ç–∞
    ensure_data()
    DATA["pending_bids"][str(call.from_user.id)] = lot_id
    save_data(DATA)
    bot.register_next_step_handler(msg, handle_bid_amount)

def handle_bid_amount(message: types.Message):
    user_id = str(message.from_user.id)
    ensure_data()
    lot_id = DATA["pending_bids"].get(user_id)
    if not lot_id:
        bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, –∑–∞–ø—Ä–æ—Å —Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞–∂–º–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É¬ª –µ—â—ë —Ä–∞–∑.")
        return
    lot = DATA["lots"].get(lot_id)
    if not lot:
        bot.reply_to(message, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        DATA["pending_bids"].pop(user_id, None)
        save_data(DATA)
        return

    # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
    text = (message.text or "").strip().replace(",", ".").replace("$", "")
    try:
        amount = float(text)
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 150 –∏–ª–∏ 150.5")
        bot.register_next_step_handler(message, handle_bid_amount)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
    cur = float(lot.get("current_bid", 0) or 0)
    min_required = MIN_BID_USD if cur < MIN_BID_USD else (cur + 1)
    if amount < min_required:
        bot.reply_to(
            message,
            f"–°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º <b>${min_required:.2f}</b>."
        )
        bot.register_next_step_handler(message, handle_bid_amount)
        return

    # –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—Ç–∞–≤–∫–∏
    lot["current_bid"] = round(amount, 2)
    lot["current_bidder_id"] = message.from_user.id
    DATA["lots"][lot_id] = lot
    # –æ—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
    DATA["pending_bids"].pop(user_id, None)
    save_data(DATA)

    bot.reply_to(
        message,
        f"‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: <b>${lot['current_bid']:.2f}</b> –Ω–∞ –ª–æ—Ç <b>{lot['title']}</b>.\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫: {mask_user(message.from_user)}"
    )

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        try:
            bot.send_message(
                int(ADMIN_CHAT_ID),
                f"üßæ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞\n–õ–æ—Ç: {lot['title']}\n–°—É–º–º–∞: ${lot['current_bid']:.2f}\n–û—Ç: {mask_user(message.from_user)}"
            )
        except Exception:
            pass

# === FALLBACKS ===
@bot.message_handler(content_types=["text"])
def route_text(message: types.Message):
    txt = (message.text or "").strip().lower()
    if txt in ("/help", "help", "–ø—Ä–∞–≤–∏–ª–∞", "–∏–Ω—Ñ–æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ÑπÔ∏è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / –ø—Ä–∞–≤–∏–ª–∞"):
        return info(message)
    if txt in ("–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞"):
        return support(message)
    if txt in ("–º–µ–Ω—é", "/start", "/menu"):
        return start(message)
    if txt in ("–ª–æ—Ç—ã", "—Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤", "üìã —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤"):
        return show_lots(message)

    bot.send_message(
        message.chat.id,
        "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ /menu –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb()
    )

# === RUN ===
if __name__ == "__main__":
    print("Bot is running...")
    # long polling
    bot.infinity_polling(timeout=60, long_polling_timeout=60, skip_pending=True)

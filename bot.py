import os
import json
import time
from typing import Dict, Any
from dotenv import load_dotenv
import telebot
from telebot import types

# === ENV ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

if not BOT_TOKEN:
    raise RuntimeError("–£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ .env –∏–ª–∏ Secrets Replit).")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

DATA_FILE = "data.json"
MIN_BID_USD = 50  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $50

# === STORAGE ===
def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE):
        data = {
            "lots": {
                "1": {
                    "id": "1",
                    "title": "BMW M3 (E92), 2012",
                    "photo_url": "https://picsum.photos/seed/bmw_m3/1024/768",
                    "current_bid": 0,
                    "current_bidder_id": None,
                    "created_at": int(time.time())
                },
                "2": {
                    "id": "2",
                    "title": "Audi A6 (C7), 2014",
                    "photo_url": "https://picsum.photos/seed/audi_a6/1024/768",
                    "current_bid": 0,
                    "current_bidder_id": None,
                    "created_at": int(time.time())
                }
            },
            "pending_bids": {},  # user_id -> lot_id
            "registered_users": {}  # user_id -> phone_number
        }
        save_data(data)
        return data
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data: Dict[str, Any]) -> None:
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

DATA = load_data()

# === KEYBOARDS ===
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤"))
    kb.row(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / –ü—Ä–∞–≤–∏–ª–∞"), types.KeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return kb

def lot_inline_kb(lot_id: str):
    ikb = types.InlineKeyboardMarkup()
    ikb.add(types.InlineKeyboardButton("üí∏ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"bid:{lot_id}"))
    return ikb

# === HELPERS ===
def mask_user(user: telebot.types.User) -> str:
    name = user.first_name or "–£—á–∞—Å—Ç–Ω–∏–∫"
    return f"{name} ({user.id})"

def lot_text(lot: Dict[str, Any]) -> str:
    cur = lot.get("current_bid", 0)
    status = f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <b>${cur}</b>" if cur and cur >= MIN_BID_USD else "–°—Ç–∞–≤–æ–∫ –µ—â—ë –Ω–µ—Ç"
    return (
        f"<b>{lot['title']}</b>\n"
        f"{status}\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: <b>${MIN_BID_USD}</b>"
    )

def ensure_data():
    global DATA
    DATA = load_data()

# === START + REGISTRATION ===
@bot.message_handler(commands=["start", "menu"])
def start(message: types.Message):
    text = (
        "üì¢ <b>–í—ñ—Ç–∞—î–º–æ —É –•–õ–†-–ê–£–ö–¶–Ü–û–ù–Ü!</b> üéä\n\n"
        "–ê—É–∫—Ü—ñ–æ–Ω –•–õ–† ‚Äî —Ü–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–æ—Ä–≥–∏, –∞ —à–∞–Ω—Å –ø—Ä–∏–¥–±–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –ø–æ—Å–ª—É–≥–∏ üî•\n\n"
        "üîπ <b>–Ø–∫ –≤—Å–µ –ø—Ä–∞—Ü—é—î?</b>\n"
        "ü™Ñ –°—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ <b>5 –ª–æ—Ç—ñ–≤</b>;\n"
        "ü™Ñ –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –∫–æ–∂–Ω–æ–≥–æ –ª–æ—Ç–∞ ‚Äî <b>0$</b>;\n"
        f"ü™Ñ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ‚Äî –º—ñ–Ω—ñ–º—É–º <b>${MIN_BID_USD}</b>;\n"
        "ü™Ñ –Ø–∫—â–æ —Ö—Ç–æ—Å—å –ø–µ—Ä–µ–±‚Äô—î –í–∞—à—É —Å—Ç–∞–≤–∫—É ‚Äî –±–æ—Ç –Ω–∞–¥—ñ—à–ª–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è;\n"
        "ü™Ñ –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ <b>10 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç–∞–≤–∫–∏</b>;\n\n"
        "üèÜ –ü–µ—Ä–µ–º–∞–≥–∞—î —Ç–æ–π, —Ö—Ç–æ –∑—Ä–æ–±–∏–≤ –Ω–∞–π–±—ñ–ª—å—à—É —Å—Ç–∞–≤–∫—É!\n\n"
        "üëâ –î–ª—è —É—á–∞—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–æ–π—Ç–∏ <b>—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é</b>:\n"
        "üì± –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ."
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    phone_btn = types.KeyboardButton("üì≤ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    markup.add(phone_btn)

    bot.send_message(message.chat.id, text, reply_markup=markup)

# === HANDLE CONTACT ===
@bot.message_handler(content_types=['contact'])
def handle_contact(message: types.Message):
    if message.contact is not None:
        phone_number = message.contact.phone_number
        user_id = str(message.from_user.id)
        DATA["registered_users"][user_id] = phone_number
        save_data(DATA)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª–æ—Ç—ñ–≤ —Ç–∞ —Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ üìã –°–ø–∏—Å–æ–∫ –ª–æ—Ç—ñ–≤.",
            reply_markup=main_menu_kb()
        )

# === SHOW LOTS ===
@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() in ["üìã —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤", "—Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤", "–ª–æ—Ç—ã"])
def show_lots(message: types.Message):
    ensure_data()
    user_id = str(message.from_user.id)
    if user_id not in DATA.get("registered_users", {}):
        bot.send_message(message.chat.id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=main_menu_kb())
        return

    lots = DATA.get("lots", {})
    if not lots:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –ª–æ—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=main_menu_kb())
        return

    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ—Ç—ã:", reply_markup=main_menu_kb())
    for lot_id, lot in lots.items():
        caption = lot_text(lot)
        try:
            bot.send_photo(message.chat.id, photo=lot["photo_url"], caption=caption, reply_markup=lot_inline_kb(lot_id))
        except Exception:
            bot.send_message(message.chat.id, caption, reply_markup=lot_inline_kb(lot_id))

# === INFO / RULES ===
@bot.message_handler(func=lambda m: m.text and m.text.strip().lower().startswith("‚ÑπÔ∏è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
def info(message: types.Message):
    rules = (
        "<b>–ü—Ä–∞–≤–∏–ª–∞ –∞—É–∫—Ü—ñ–æ–Ω—É</b>\n\n"
        f"‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞: <b>${MIN_BID_USD}</b>.\n"
        "‚Ä¢ –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –ø–æ—Ç–æ—á–Ω—É –º—ñ–Ω—ñ–º—É–º –Ω–∞ $1.\n"
        "‚Ä¢ –°—Ç–∞–≤–∫–∏ –æ—Å—Ç–∞—Ç–æ—á–Ω—ñ —Ç–∞ –≤—ñ–¥–º—ñ–Ω—ñ –Ω–µ –ø—ñ–¥–ª—è–≥–∞—é—Ç—å.\n"
        "‚Ä¢ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –º–æ–∂–µ –∑–Ω—è—Ç–∏ –ª–æ—Ç –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–æ—Ä–≥—ñ–≤.\n"
        "‚Ä¢ –ë—É–¥—å-—è–∫—ñ —Å–ø—ñ—Ä–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó –≤–∏—Ä—ñ—à—É—é—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é."
    )
    bot.send_message(message.chat.id, rules, reply_markup=main_menu_kb())

# === SUPPORT ===
@bot.message_handler(func=lambda m: m.text and m.text.strip().lower().startswith("üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞"))
def support(message: types.Message):
    text = (
        "–Ø–∫—â–æ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è –∑ –ø—Ä–æ–±–ª–µ–º–æ—é, –æ–ø–∏—à—ñ—Ç—å —ó—ó –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º ‚Äî –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ.\n\n"
        "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu_kb())
    bot.register_next_step_handler(message, collect_support)

def collect_support(message: types.Message):
    report = message.text or "<–±–µ–∑ —Ç–µ–∫—Å—Ç–∞>"
    bot.reply_to(message, "–î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.")
    if ADMIN_CHAT_ID:
        try:
            bot.send_message(int(ADMIN_CHAT_ID),
                             f"üÜò <b>–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É</b>\n–í—ñ–¥: {mask_user(message.from_user)}\n\n{report}")
        except Exception:
            pass

# === CALLBACKS: VIEW LOT ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("view:"))
def on_view_lot(call: types.CallbackQuery):
    lot_id = call.data.split(":", 1)[1]
    ensure_data()
    lot = DATA["lots"].get(lot_id)
    if not lot:
        bot.answer_callback_query(call.id, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    caption = lot_text(lot)
    try:
        bot.send_photo(call.message.chat.id, photo=lot["photo_url"], caption=caption, reply_markup=lot_inline_kb(lot_id))
    except Exception:
        bot.send_message(call.message.chat.id, caption, reply_markup=lot_inline_kb(lot_id))
    bot.answer_callback_query(call.id)

# === CALLBACKS: BID ===
@bot.callback_query_handler(func=lambda c: c.data.startswith("bid:"))
def on_bid(call: types.CallbackQuery):
    user_id = str(call.from_user.id)
    ensure_data()
    if user_id not in DATA.get("registered_users", {}):
        bot.answer_callback_query(call.id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å, –Ω–∞–¥—ñ—Å–ª–∞–≤—à–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    lot_id = call.data.split(":", 1)[1]
    lot = DATA["lots"].get(lot_id)
    if not lot:
        bot.answer_callback_query(call.id, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot.answer_callback_query(call.id)
    min_required = MIN_BID_USD if lot.get('current_bid', 0) < MIN_BID_USD else lot.get('current_bid', 0) + 1
    msg = bot.send_message(
        call.message.chat.id,
        f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Å—Ç–∞–≤–∫–∏ –≤ $ –¥–ª—è –ª–æ—Ç–∞:\n<b>{lot['title']}</b>\n(–º—ñ–Ω—ñ–º—É–º ${min_required:.2f})"
    )
    DATA["pending_bids"][user_id] = lot_id
    save_data(DATA)
    bot.register_next_step_handler(msg, handle_bid_amount)

def handle_bid_amount(message: types.Message):
    user_id = str(message.from_user.id)
    ensure_data()
    lot_id = DATA["pending_bids"].get(user_id)
    if not lot_id:
        bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, –∑–∞–ø–∏—Ç —Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É¬ª —â–µ —Ä–∞–∑.")
        return
    lot = DATA["lots"].get(lot_id)
    if not lot:
        bot.reply_to(message, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        DATA["pending_bids"].pop(user_id, None)
        save_data(DATA)
        return

    text = (message.text or "").strip().replace(",", ".").replace("$", "")
    try:
        amount = float(text)
    except ValueError:
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 150 –∞–±–æ 150.5")
        bot.register_next_step_handler(message, handle_bid_amount)
        return

    cur = float(lot.get("current_bid", 0) or 0)
    min_required = MIN_BID_USD if cur < MIN_BID_USD else cur + 1
    if amount < min_required:
        bot.reply_to(message, f"–°—Ç–∞–≤–∫–∞ –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞. –ú—ñ–Ω—ñ–º—É–º <b>${min_required:.2f}</b>.")
        bot.register_next_step_handler(message, handle_bid_amount)
        return

    lot["current_bid"] = round(amount, 2)
    lot["current_bidder_id"] = message.from_user.id
    DATA["lots"][lot_id] = lot
    DATA["pending_bids"].pop(user_id, None)
    save_data(DATA)

    bot.reply_to(message,
        f"‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞: <b>${lot['current_bid']:.2f}</b> –Ω–∞ –ª–æ—Ç <b>{lot['title']}</b>.\n"
        f"–£—á–∞—Å–Ω–∏–∫: {mask_user(message.from_user)}"
    )

    if ADMIN_CHAT_ID:
        try:
            bot.send_message(int(ADMIN_CHAT_ID),
                             f"üßæ –ù–æ–≤–∞ —Å—Ç–∞–≤–∫–∞\n–õ–æ—Ç: {lot['title']}\n–°—É–º–∞: ${lot['current_bid']:.2f}\n–í—ñ–¥: {mask_user(message.from_user)}")
        except Exception:
            pass

# === FALLBACK TEXT ===
@bot.message_handler(content_types=["text"])
def route_text(message: types.Message):
    txt = (message.text or "").strip().lower()
    if txt in ("/help", "help", "–ø—Ä–∞–≤–∏–ª–∞", "–∏–Ω—Ñ–æ", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ÑπÔ∏è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / –ø—Ä–∞–≤–∏–ª–∞"):
        return info(message)
    if txt in ("–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "üÜò –ø–æ–¥–¥–µ—Ä–∂–∫–∞"):
        return support(message)
    if txt in ("–º–µ–Ω—é", "/start", "/menu"):
        return start(message)
    if txt in ("–ª–æ—Ç—ã", "—Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤", "üìã —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤"):
        return show_lots(message)

    bot.send_message(message.chat.id,
                     "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ /menu –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.",
                     reply_markup=main_menu_kb())

# === RUN BOT ===
if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(timeout=60, long_polling_timeout=60, skip_pending=True)
